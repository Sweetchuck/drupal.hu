version: 2.1

.env_common: &env_common
  BASH_ENV: '/root/.bashrc'

  COMPOSER_NO_INTERACTION: '1'
  COMPOSER_MEMORY_LIMIT: '-1'

  DRUSH_OPTIONS_PROGRESS_DELAY: '9999'
  DRUSH_OPTIONS_NO_INTERACTION: '1'

  appDrushExecutable: 'bin/drush --config=drush'
  appDrushSiteAlias: '@app.local'
  appDocroot: 'docroot'
  appInstallProfileName: 'appp'

  appChromiumHostPort: 'localhost:9222'

.env_mysql: &env_mysql
  MYSQL_USER: 'drupalhu'
  MYSQL_PASSWORD: 'drupalhu'
  MYSQL_HOST: 'database'
  MYSQL_PORT: '3306'
  MYSQL_DATABASE: 'drupalhu__default'
  MYSQL_ROOT_PASSWORD: 'root'


executors:
  php703:
    environment:
      <<: *env_common

    docker:
      -
        name: 'main'
        image: 'sweetchuck/php-env-dev:703-12.x.x'
        entrypoint: ['/bin/bash']

  php703-mysql506:
    environment:
      <<: *env_common
      <<: *env_mysql

    docker:
      -
        image: 'sweetchuck/php-env-dev:703-12.x.x'
        entrypoint: ['/bin/bash']
      -
        name: 'database'
        image: 'mysql:5.6.45'
        environment:
          <<: *env_mysql

commands:
  init_git_identity:
    description: 'Set global Git config user.{email,name}'
    steps:
      -
        run:
          name: 'Set global Git config user.{email,name}'
          command: |-
            git config --global user.email 'circleci@drupal.hu'
            git config --global user.name  "CircleCI ${CIRCLE_USERNAME}"

  php_cli_enable_xdebug:
    description: 'PHP CLI - enable xdebug'
    steps:
      -
        run:
          name: 'PHP CLI - enable xdebug'
          command: |-
            . ./.circleci/scripts/include.bash
            appPhpCliExtensionEnable 'xdebug'

  php_cli_disable_xdebug:
    description: 'PHP CLI - disable xdebug'
    steps:
      -
        run:
          name: 'PHP CLI - disable xdebug'
          command: |-
            . ./.circleci/scripts/include.bash
            appPhpCliExtensionDisable 'xdebug'

  composer_install:
    description: 'Install Composer dependencies with cache restore and save'
    steps:
      -
        restore_cache:
          name: 'Composer - cache restore'
          keys:
            - 'composer-{{ checksum "./composer.lock" }}-2'

      -
        run:
          name: 'Composer - install'
          command: >
            [[ -d "$(composer config vendor-dir)" ]] || composer install --no-progress

      -
        save_cache:
          name: 'Composer - cache save'
          key: 'composer-{{ checksum "./composer.lock" }}-2'
          paths:
            - './bin/'
            - './docroot/core/'
            - './docroot/modules/contrib/'
            - './docroot/themes/contrib/'
            - './docroot/profiles/contrib/'
            - './docroot/libraries/'
            - './drush/Commands/contrib/'
            - './vendor/'
            - '~/.composer/cache/'

  marvin_build:
    description: 'marvin:build'
    steps:
      -
        run:
          name: 'Calculate checksum of NPM tools'
          command: |-
            # Collect all the checksum of yarn.lock files in to one file.
            echo -n '' > 'checksum-of-frontend-asset-sources.sha256'
            git ls-files -- '**/yarn.lock' | xargs sha256sum >> 'checksum-of-frontend-asset-sources.sha256'
      -
        restore_cache:
          name: 'NPM - cache restore'
          keys:
            - 'npm-{{ checksum "checksum-of-frontend-asset-sources.sha256" }}-1'
      -
        run:
          name: 'drush marvin:build'
          command: >
            $appDrushExecutable marvin:build

      -
        save_cache:
          name: 'NPM - cache save'
          key: 'npm-{{ checksum "checksum-of-frontend-asset-sources.sha256" }}-1'
          paths:
            - './docroot/themes/custom/appf/node_modules/'

  marvin_lint:
    description: 'Run linters'
    steps:
      -
        run:
          name: 'Run linters'
          command: >-
            $appDrushExecutable marvin:lint

  marvin_test_unit:
    description: 'Run unit tests'
    steps:
      -
        run:
          name: 'Run unit tests'
          command: >-
            $appDrushExecutable marvin:test:unit
      -
        store_test_results:
          name: 'Store unit test results'
          path: './reports/machine/junit'
      -
        run:
          name: 'Publish the code coverage report on Codecov.io'
          when: 'always'
          command: >-
            [ ! -s reports/machine/coverage/*/coverage.xml ]
            || bash <(curl -s https://codecov.io/bash)
            || true

  artifact_acquia_build:
    description: 'Build an Acquia specific release artifact'
    steps:
      -
        run:
          name: 'Build an Acquia specific release artifact'
          command: |-
            $appDrushExecutable \
              --define='marvin.acquia.projectId=' \
              marvin:artifact:build:acquia
      -
        persist_to_workspace:
          name: 'Store the release artifact'
          root: './artifacts'
          paths:
            - '*/acquia'

  artifact_acquia_restore:
    description: 'Restore the previously built Acquia artifact'
    steps:
      -
        attach_workspace:
          name: 'Restore the previously built Acquia artifact'
          at: './artifacts'

  nginx_virtual_host:
    description: 'Configure Nginx'
    steps:
      -
        run:
          name: 'Configure Nginx'
          command: |-
            . ./.circleci/scripts/include.bash
            versionNumber="$(appLatestArtifactVersionNumber)"
            appNginxVirtualHost "${PWD}/artifacts/${versionNumber}/acquia"

  supervisor_start:
    description: 'Start supervisor and wait until the servies are ready'
    steps:
      -
        run:
          name: 'Start Supervisor'
          command: |-
            supervisord --configuration /etc/supervisor/supervisor.ini
      -
        run:
          name: 'Wait for the headless Chromium'
          command: |-
            . ./.circleci/scripts/include.bash
            appWaitForHeadlessChromium "${appChromiumHostPort}"

  marvin_test_behat:
    description: 'Run Behat tests'
    steps:
      -
        attach_workspace:
          at: './artifacts'
      -
        run:
          name: 'marvin:onboarding'
          command: |-
            . ./.circleci/scripts/include.bash

            appMarvinOnboarding \
              "${PWD}" \
              "${appDrushSiteAlias}"

            versionNumber="$(appLatestArtifactVersionNumber)"
            appMarvinOnboarding \
              "${PWD}/artifacts/${versionNumber}/acquia" \
              "${appDrushSiteAlias}"
      -
        run:
          name: 'Prepare Behat configuration'
          command: |-
            . ./.circleci/scripts/include.bash
            versionNumber="$(appLatestArtifactVersionNumber)"
            sed \
              --in-place \
              --expression "s@%paths.base%/../../@${PWD}/artifacts/${versionNumber}/acquia/@g" \
              './tests/behat/config/extension.drupal.yml'

            mkdir --parents ./tmp/behat_rerun_cache
      -
        run:
          name: 'Site install'
          command: |-
            ${appDrushExecutable} \
              "${appDrushSiteAlias}" \
              site:install \
              --yes \
              "${appInstallProfileName}" \
              --locale='hu' \
              --existing-config \
              --marvin-migrate='install'
      -
        run:
          name: 'Sync files'
          command: |-
            . ./.circleci/scripts/include.bash
            versionNumber="$(appLatestArtifactVersionNumber)"

            dstRoot="artifacts/${versionNumber}/acquia"

            srcDir="${appDocroot}/sites/default/files"
            rsync \
              --archive \
              --stats \
              --recursive \
              --owner \
              --group \
              --perms \
              --delete \
              "${srcDir}/" \
              "${dstRoot}/${srcDir}"

            srcDir="sites/default/private"
            rsync \
              --archive \
              --stats \
              --recursive \
              --owner \
              --group \
              --perms \
              --delete \
              "${srcDir}/" \
              "${dstRoot}/${srcDir}"
      -
        run:
          name: 'Update translations'
          command: |-
            . ./.circleci/scripts/include.bash
            versionNumber="$(appLatestArtifactVersionNumber)"
            cd "./artifacts/${versionNumber}/acquia"

            ${appDrushExecutable} \
              "${appDrushSiteAlias}" \
              locale:check

            ${appDrushExecutable} \
              "${appDrushSiteAlias}" \
              locale:update

            ${appDrushExecutable} \
              "${appDrushSiteAlias}" \
              cache:rebuild
      -
        run:
          name: 'Check config status'
          command: |-
            . ./.circleci/scripts/include.bash
            versionNumber="$(appLatestArtifactVersionNumber)"
            cd "./artifacts/${versionNumber}/acquia"

            configStatus="$(${appDrushExecutable} "${appDrushSiteAlias}" config:status --format=yaml)"
            echo "${configStatus}"
            [[ "${configStatus}" == '' ]]
      -
        run:
          name: 'Run Behat tests'
          command: |-
            cd tests/behat
            ../../bin/behat
      -
        store_artifacts:
          name: 'Store test reports as artifacts'
          path: './reports'
          destination: 'reports'
      -
        store_test_results:
          name: 'Store Behat test results'
          path: './reports/machine/junit'

jobs:
  qa_lint_unit:
    executor: 'php703'
    working_directory: '~/repo'
    steps:
      - 'checkout'
      - 'php_cli_disable_xdebug'
      - 'composer_install'
      - 'marvin_build'
      - 'marvin_lint'
      - 'php_cli_enable_xdebug'
      - 'marvin_test_unit'
      - 'php_cli_disable_xdebug'

  release_artifact_build:
    executor: 'php703'
    working_directory: '~/repo'
    steps:
      - 'checkout'
      - 'php_cli_disable_xdebug'
      - 'composer_install'
      - 'marvin_build'
      - 'artifact_acquia_build'

  qa_behat:
    executor: 'php703-mysql506'
    working_directory: '~/repo'
    steps:
      - 'checkout'
      - 'php_cli_disable_xdebug'
      - 'composer_install'
      - 'init_git_identity'
      - 'artifact_acquia_restore'
      - 'nginx_virtual_host'
      - 'supervisor_start'
      - 'marvin_test_behat'

workflows:
  lint_unit_behat:
    jobs:
      -
        qa_lint_unit:
          name: 'QA - Lint and Unit tests'
      -
        release_artifact_build:
          name: 'Build - Acquia artifact'
      -
        qa_behat:
          name: 'QA - Behat'
          requires:
            - 'Build - Acquia artifact'
